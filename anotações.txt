todo programa em java pode ser composto por pacotes  (package) ex:

package primeiroprograma;

todo programa em java deve ter um comando de cabeçalho da class ex:

package PrimeiroPrograma;

public class PrimeiroPrograma {
    

} 

dentro do bloco(CLASS) criamos um metodo

public class PrimeiroPrograma {
    public static void main(String[] args){
        System.out.print("olá, mundo!");
    }

} 


pra facilitar o comando de print no netbeans usar sout em seguida pressionar tab, no vscode sysout e em seguida apertar enter

o metodo principal no netbeans pode ser chamado utilizando psvm e pressionando tab, no vs code podemos digitar "main" e pressionar enter


palavras utilizando letras maiusculas ou minusculas: 

classes ou interfaces utilizam letras maiusculas no inicio da palavra e camel case caso existam outras palavras

se a primeira letra for minusculas e outras palavras começando com maiusculas podem ser um atributo ou uma variável ou um método


se todas as letras de todas as palavras estivem minusculas, trata-se de um pacote

todas as letras maiusculas é usado para nomear constantes



Utilizando o swing consigo criar janelas para os programas em java, porém, no vscode não é possível manipular essas janelas com facilidade como acontece no netbeans



comentários em java: // para uma linha
/* comenta tudo dentro do barra asterisco   */ 

comentário para documentação:
/**
@author
@version
@since



*/




java é uma linguagem fortemente tipada, para fazer alterações no tipo do dado é necessário fazer uma conversão.

formas de declarar variaveis em java e tipos:


int idade = 26;


typecast:
int idade = (int) 26;

utilizando class:
*nesse caso não é uma variável mas um objeto
Integer idade = new Integer (3);


exemplo com numeros reais:

float salario = 1800.23f; <- o f no final indica que o numero é float

 type cast:
 float salario = (float) 1800.23;

 Class:
 Float salario = new Float(1800.23);



 tipo caractere:
*em java se utiliza aspas simples:

 char letra = 'G';

typecast:
char letra = (char) 'G'; 

class:
Character letra = new Character ('G');

valores boleanos:

boolean casado = true;

typecast:
boolean casado = (boolean) true;

class:
Boolean casado = new Boolean (true)


 *não existe tipo string no java, existe a class String, diferente do tipo char o conteúdo deve ser escrito com aspas duplas.


 lógico - boolean - 1 bit 
 literal - char - 1 byte
 literal string - 1 byte pra cada caractere
 
 inteiros - byte - 1 byte - maior valor é 127
 inteiros - short - 2 bytes - maior valor é 32767
 inteiros - int - 4 bytes - maior 2 147 483
 inteiros - long - 8 byte - 2 elevado a 63

reais - float  - 4 bytes
reais double - 8 bytes



saída de dados em java:
exemplos:
      String nome = "Gabriel";
            float nota = 8.5f;
            System.out.println("A nota de " + nome + " é " + nota); - concatenando variaveis e strings
            System.out.printf("A nota de %s é %.2f \n",nome, nota); - print formatado e usando duas casas decimais 
            System.out.format("A nota de %s é %.3f \n",nome, nota); - outra forma de formatar e usando 3 casas decimais



entrada de dados em java:
o java.lang não possui comandos de entrada de dados, pra isso podemos importar a biblioteca java.util.Scanner

import java.util.Scanner


Scanner entrada = new Scanner(System.in);
            String nome = entrada.nextLine();
            float nota = entrada.nextFloat();
            System.out.format("A nota de %s é %.3f \n",nome, nota);



Melhorando a interatividade:

  Scanner entrada = new Scanner(System.in);
            System.out.println("Digite o nome do aluno: ");
            String nome = entrada.nextLine();
            System.out.println("Digite a nota do aluno: ");
            float nota = entrada.nextFloat();
           
            System.out.format("A nota de %s é %.3f \n",nome, nota);
  


  então, a entrada é inserida em um objeto: Scanner input = new Scanner (System.in);

  o objeto input aloca o dado dentro de uma variavel utilizando o sufixo ... = input.nextInt() ou nextFloat() ou nextLine() (para Strings)...


  converter inteiro em string:
    int idade = 30;
    String valor = Integer.toString(idade);


    converter string em inteiro:
    int idade = "30";
    int idade = Integer.parseInt(valor);



operadores aritmeticos:

os operadores são similares aos de JavaScript, linguagem C...

+
-
*
/
%
++
--
+=
-=
*=
/=
%=

classe Math:
valor de pi:
Math.PI


potencia:
Math.pow(numerador,denominador);


raiz quadrada:
Math.sqrt(valor);


raiz cubica:
Math.cbrt(valor)




arredondamentos:

Valor absoluto:
Math.abs(ex:-10) o valor será 10

arredondamento pra baixo:
Math.floor(ex:2.9) - o valor será 2

arredondamento pra cima:
Math.ceil(ex:4.3) - o valor será 5

arredondamento aritmetico: 
Math.round(ex:4.3 e 4.8) - o primeiro valor será 4 e o segundo será 5

numeros aleatorios:
Math.random() - cria um numero entre 0.0  a 1.0

para gerar um numero aleatorio dentro de um limite estabelecido, podemos usar a seguinte sentença:

double aleatorio = Math.random();
(valorInicial + aleatorio * (valorFinal-valorIncial));

ex:
int numeroAleatorio = (int) (10 + aleatorio * (50-10));

o resultado será um valor entre 10 e 50



-Java também possui operador ternário
exemplo:
maior = n1 > n2 ? n1 : n2;

na operação acima se o n1 for maior que n2 a variavel maior recebe n1 se não, recebe n2



vetores/arrays:

a linha abaixo cria um vetor com 4 posições:

int n [] = new int [4];
ou
int [] n = new int[4];

*um vetor no java é um objeto

  atribuindo valores ao vetor:
  n[0] = 3;
  n[1] = 5;
  n[2] = 8;
  n[3] = 2;


  para criar o vetor ja atribuindo se escreve:
  int n[] = {3,8,5,2};



varrer vetor com for:
  for(int i = 0; i <= n.length){
    System.out.println(n[i]);
  }


  for it:
  for (int valor: n){
    System.out.println(valor)
  }
  *nesse caso a variavel valor a cada laço vai receber o numero depositado em n.


  colocando vetor em ordem:

  int num [] = {3, 5, 1, 8, 4};
  Arrays.sort(num);

  alocando a posição de um vetor dentro de uma variavel:

  int posicao = Arrays.binarySearch(num, 8);
  * nesse caso num é o nome da array e 8 é o valor que será buscado na array, o valor que será guardado em posicao é 3.
 ** se o valor buscado não existir dentro da array o valor guardado na variavel será o valor buscado negativo. ex: -8.


colocando o mesmo valor em todas as posições do vetor:

 Arrays.fill(num, 0); 
 

 procedimentos:

 sem retorno:

 void soma (int a, int b){
   int s = a + b;
   System.out.print(s);

 }

 soma(5,2); 
 *chamada da função passando 5 e 2 como parametro

 observar código escrito no projeto TesteFunca01 :

 as funções são escritas dentro do public class e pode ser chamadas no "main".
 Porém ocorrerá um erro prq as funções precisam utilizar o método estatico, ou seja, ele não precisa ser transformado em objeto, sendo asism o código ficará:

 static void soma (int a, int b)...


com retorno:

static int sub (int a, int b){
  int s = a - b;
  
  return s;
}

int valor = sub(5,2)


ao criar uma função com a palavra public na frente, ela pode ser utilizada por qualquer parte do programa, ex:
public static int sub( int a, int b)...

se utilizar private, ela não poderá ser utlizada em outra classe  do programa.